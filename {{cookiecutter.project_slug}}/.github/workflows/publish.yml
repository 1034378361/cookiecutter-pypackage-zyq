name: 发布到PyPI

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      version:
        description: '版本号 (如 1.0.0)'
        required: true
        type: string
      tag:
        description: '是否创建标签'
        required: false
        default: true
        type: boolean

jobs:
  changelog:
    name: 生成变更日志
    runs-on: ubuntu-latest
    outputs:
      release_notes: ${{ steps.get_changelog.outputs.release_notes }}
      version: ${{ steps.get_version.outputs.version }}

    steps:
    - uses: actions/checkout@v4.2.2
      with:
        fetch-depth: 0
        fetch-tags: true

    - name: 设置Python
      uses: actions/setup-python@v5.6.0
      with:
        python-version: '3.x'
        cache: pip

    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install gitpython

    - name: 获取版本号
      id: get_version
      run: |
        if [[ "${{ github.event_name }}" == "push" ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        else
          VERSION=${{ github.event.inputs.version }}
          if [[ "${{ github.event.inputs.tag }}" == "true" ]]; then
            git config --local user.name "GitHub Action"
            git config --local user.email "action@github.com"
            git tag -a "v${VERSION}" -m "Release v${VERSION}"
            git push origin "v${VERSION}"
          fi
        fi
        echo "version=${VERSION}" >> $GITHUB_OUTPUT

    - name: 生成CHANGELOG
      run: |
        CURRENT_TAG="v${{ steps.get_version.outputs.version }}"
        PREV_TAG=$(git tag --sort=-v:refname | grep -v "^${CURRENT_TAG}$" | head -n 1)

        if [ ! -z "$PREV_TAG" ]; then
          python scripts/generate_changelog.py --since $PREV_TAG --until $CURRENT_TAG --output RELEASE_NOTES.md
        else
          python scripts/generate_changelog.py --until $CURRENT_TAG --output RELEASE_NOTES.md
        fi

    - name: 获取发布说明
      id: get_changelog
      run: |
        if [ -f RELEASE_NOTES.md ]; then
          sed '1,2d' RELEASE_NOTES.md > RELEASE_NOTES_CLEAN.md
        else
          echo "Release v${{ steps.get_version.outputs.version }}" > RELEASE_NOTES_CLEAN.md
        fi

        NOTES=$(cat RELEASE_NOTES_CLEAN.md)
        echo "release_notes<<EOF" >> $GITHUB_OUTPUT
        echo "$NOTES" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

  deploy:
    name: 构建和发布
    needs: changelog
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4.2.2
      with:
        fetch-depth: 0

    - name: 设置Python
      uses: actions/setup-python@v5.6.0
      with:
        python-version: "3.9"

    - name: 安装 PDM
      run: |
        python -m pip install --upgrade pip
        pip install pdm

    - name: 构建包
      env:
        VERSION: ${{ needs.changelog.outputs.version }}
      run: |
        pdm build

    - name: 发布到PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}

    - name: 创建GitHub Release
      uses: softprops/action-gh-release@v2.2.2
      with:
        tag_name: v${{ needs.changelog.outputs.version }}
        name: Release v${{ needs.changelog.outputs.version }}
        body: ${{ needs.changelog.outputs.release_notes }}
        files: dist/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
