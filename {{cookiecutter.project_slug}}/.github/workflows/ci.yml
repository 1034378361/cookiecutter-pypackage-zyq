name: CI/CD

on:
  push:
    branches: [main, master]
    tags:
      - "v*"
  pull_request:
    branches: [main, master]
  workflow_dispatch:
    inputs:
      python-version:
        description: 'Python版本'
        required: false
        default: '3.12'
        type: string
      publish:
        description: '是否发布到PyPI'
        required: false
        default: false
        type: boolean
      version:
        description: '版本号 (如 1.0.0，仅在手动发布时使用)'
        required: false
        type: string

# 全局环境变量
env:
  SOURCE_DIR: src
  TEST_DIR: tests
  DEFAULT_PYTHON: '3.12'
  MIN_PYTHON: '{{cookiecutter.python_min_version}}'

jobs:
  # 测试任务矩阵 - 在多个Python版本上运行测试
  test:
    name: 测试 Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: ['{{cookiecutter.python_min_version}}', '3.9', '3.10', '3.11', '3.12']
        include:
          # 在Windows上测试最低和最新的Python版本
          - os: windows-latest
            python-version: '{{cookiecutter.python_min_version}}'
          - os: windows-latest
            python-version: '3.12'
          # 在macOS上测试最新的Python版本
          - os: macos-latest
            python-version: '3.12'

    steps:
    - uses: actions/checkout@v4.2.2
      with:
        fetch-depth: 0

    - name: 设置 Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5.6.0
      with:
        python-version: ${{ matrix.python-version }}
        cache: pip

    # 缓存pytest
    - name: 缓存pytest
      uses: actions/cache@v4.0.2
      with:
        path: |
          .pytest_cache
          ~/.cache/pytest
        key: ${{ runner.os }}-pytest-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pytest-${{ matrix.python-version }}-
          ${{ runner.os }}-pytest-

    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: 运行测试
      run: |
        pytest --cov=${{ env.SOURCE_DIR }} --cov-report=term --cov-report=xml ${{ env.TEST_DIR }}/ -v

    - name: 上传测试覆盖率报告
      uses: codecov/codecov-action@v4.5.0
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        fail_ci_if_error: false

  # 代码质量和静态分析检查
  quality:
    name: 代码质量 & 类型检查
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4.2.2
      with:
        fetch-depth: 0

    - name: 设置 Python
      uses: actions/setup-python@v5.6.0
      with:
        python-version: ${{ env.DEFAULT_PYTHON }}
        cache: pip

    # 缓存Pre-commit环境
    - name: 缓存 pre-commit 环境
      uses: actions/cache@v4.0.2
      with:
        path: ~/.cache/pre-commit
        key: ${{ runner.os }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pre-commit-

    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    # 运行Ruff进行代码质量检查和格式化
    - name: Ruff (质量检查)
      run: ruff check .

    - name: Ruff (格式检查)
      run: ruff format --check .

    # 运行MyPy进行类型检查
    - name: MyPy (类型检查)
      run: |
        mypy --show-error-codes --pretty ${{ env.SOURCE_DIR }}

    # 运行安全检查(Bandit)
    - name: Bandit (安全检查)
      run: |
        bandit -r ${{ env.SOURCE_DIR }} -x tests -c pyproject.toml

    # 生成类型覆盖报告 (仅在主分支上)
    - name: 生成类型覆盖报告
      if: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' }}
      run: |
        mkdir -p reports/mypy
        mypy --html-report reports/mypy ${{ env.SOURCE_DIR }}

    - name: 上传类型检查报告
      if: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' }}
      uses: actions/upload-artifact@v4.6.2
      with:
        name: mypy-report
        path: reports/mypy/
        retention-days: 30

  # 构建文档
  docs:
    name: 构建文档
    runs-on: ubuntu-latest
    # 当push到主分支或者是PR时运行
    if: ${{ github.event_name == 'push' || github.event_name == 'pull_request' }}

    steps:
    - uses: actions/checkout@v4.2.2

    - name: 设置 Python
      uses: actions/setup-python@v5.6.0
      with:
        python-version: ${{ env.DEFAULT_PYTHON }}
        cache: pip

    # 缓存MkDocs构建
    - name: 缓存MkDocs
      uses: actions/cache@v4.0.2
      with:
        path: |
          .cache
          site/.cache
        key: ${{ runner.os }}-mkdocs-${{ hashFiles('mkdocs.yml') }}-${{ hashFiles('docs/**') }}
        restore-keys: |
          ${{ runner.os }}-mkdocs-

    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: 构建文档
      run: |
        mkdocs build --strict

    - name: 上传文档构建结果
      uses: actions/upload-artifact@v4.6.2
      with:
        name: docs-site
        path: site/
        retention-days: 7

  # 自动更新CHANGELOG
  changelog:
    name: 更新变更日志
    runs-on: ubuntu-latest
    # 仅当推送标签或手动发布时运行
    if: startsWith(github.ref, 'refs/tags/v') || github.event.inputs.publish == 'true'
    outputs:
      release_notes: ${{ steps.get_notes.outputs.notes }}
      version: ${{ steps.get_version.outputs.version }}

    steps:
    - uses: actions/checkout@v4.2.2
      with:
        fetch-depth: 0
        fetch-tags: true

    - name: 设置Python
      uses: actions/setup-python@v5.6.0
      with:
        python-version: ${{ env.DEFAULT_PYTHON }}

    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install gitpython pyyaml

    # 获取版本号 (从标签或输入)
    - name: 解析版本号
      id: get_version
      run: |
        if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        else
          VERSION=${{ github.event.inputs.version }}
          # 创建一个本地标签用于生成日志
          if [[ -n "$VERSION" ]]; then
            git config --local user.name "GitHub Action"
            git config --local user.email "action@github.com"
            git tag -a "v${VERSION}" -m "Release v${VERSION}" || true
          fi
        fi
        echo "version=${VERSION}" >> $GITHUB_OUTPUT

    # 生成CHANGELOG
    - name: 生成发布说明
      run: |
        if [[ -n "${{ steps.get_version.outputs.version }}" ]]; then
          CURRENT_TAG="v${{ steps.get_version.outputs.version }}"
          PREV_TAG=$(git tag --sort=-v:refname | grep -v "^${CURRENT_TAG}$" | head -n 1)

          if [ ! -z "$PREV_TAG" ]; then
            python scripts/generate_changelog.py --since $PREV_TAG --until $CURRENT_TAG --output RELEASE_NOTES.md
          else
            python scripts/generate_changelog.py --until $CURRENT_TAG --output RELEASE_NOTES.md
          fi

          python scripts/generate_changelog.py --config .changelog.yml
        fi

    # 获取发布说明
    - name: 提取发布说明
      id: get_notes
      run: |
        if [ -f RELEASE_NOTES.md ]; then
          # 删除标题和版本行，保留实际内容
          sed '1,2d' RELEASE_NOTES.md > RELEASE_NOTES_CLEAN.md
          NOTES=$(cat RELEASE_NOTES_CLEAN.md)
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          echo "$NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          echo "notes=Release v${{ steps.get_version.outputs.version }}" >> $GITHUB_OUTPUT
        fi

    # 提交更新的CHANGELOG
    - name: 提交CHANGELOG更改
      if: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' }}
      uses: stefanzweifel/git-auto-commit-action@v5.2.0
      with:
        commit_message: "docs: 更新 CHANGELOG"
        file_pattern: "CHANGELOG.md"

  # 发布到PyPI
  publish:
    name: 发布到PyPI
    runs-on: ubuntu-latest
    needs: [test, quality, changelog]
    if: |
      (startsWith(github.ref, 'refs/tags/v') || github.event.inputs.publish == 'true') &&
      needs.changelog.outputs.version != ''

    steps:
    - uses: actions/checkout@v4.2.2
      with:
        fetch-depth: 0

    - name: 设置Python
      uses: actions/setup-python@v5.6.0
      with:
        python-version: ${{ env.DEFAULT_PYTHON }}

    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install build twine pdm

    # 构建分发包
    - name: 构建包
      env:
        VERSION: ${{ needs.changelog.outputs.version }}
      run: |
        python -m build
        ls -la dist/

    # 检查包
    - name: 检查包
      run: |
        python -m twine check dist/*

    # 发布到PyPI
    - name: 发布到PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}

    # 创建GitHub Release
    - name: 创建GitHub Release
      uses: softprops/action-gh-release@v2.2.2
      with:
        tag_name: v${{ needs.changelog.outputs.version }}
        name: Release v${{ needs.changelog.outputs.version }}
        body: ${{ needs.changelog.outputs.release_notes }}
        files: dist/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
