name: 可复用发布流程

on:
  workflow_call:
    inputs:
      version:
        description: '版本号 (如 1.0.0)'
        required: true
        type: string
      release-notes:
        description: '发布说明'
        required: false
        type: string
      python-version:
        description: 'Python版本'
        required: false
        type: string
        default: '3.12'
    outputs:
      pypi-url:
        description: 'PyPI URL'
        value: ${{ jobs.publish.outputs.pypi_url }}
      github-release-url:
        description: 'GitHub Release URL'
        value: ${{ jobs.publish.outputs.github_release_url }}

env:
  PYTHON_MIN: '3.10'

jobs:
  publish:
    name: 构建和发布
    runs-on: ubuntu-latest
    outputs:
      pypi_url: ${{ steps.get_urls.outputs.pypi_url }}
      github_release_url: ${{ steps.get_urls.outputs.github_release_url }}

    steps:
    - uses: actions/checkout@v4.2.2
      with:
        fetch-depth: 0

    - name: 设置Python
      uses: actions/setup-python@v5.6.0
      with:
        python-version: ${{ env.PYTHON_MIN }} # 使用支持的最低Python版本构建
        cache: pip

    - name: 安装构建依赖
      run: |
        python -m pip install --upgrade pip
        pip install pdm twine build wheel

    - name: 构建包
      id: build
      env:
        VERSION: ${{ inputs.version }}
      run: |
        pdm build
        echo "wheel_file=$(ls dist/*.whl)" >> $GITHUB_OUTPUT
        echo "sdist_file=$(ls dist/*.tar.gz)" >> $GITHUB_OUTPUT
        echo "files_count=$(ls dist/ | wc -l)" >> $GITHUB_OUTPUT

    - name: 验证构建产物
      run: |
        # 检查构建文件数量
        if [ "${{ steps.build.outputs.files_count }}" -lt 2 ]; then
          echo "::error::构建可能不完整，预期至少有wheel和sdist两个文件"
          exit 1
        fi

        # 验证wheel包
        if [ ! -f "${{ steps.build.outputs.wheel_file }}" ]; then
          echo "::error::找不到wheel包文件"
          exit 1
        fi

        # 验证源码包
        if [ ! -f "${{ steps.build.outputs.sdist_file }}" ]; then
          echo "::error::找不到源码包文件"
          exit 1
        fi

        # 使用twine检查包
        python -m twine check dist/*

        echo "构建验证通过 ✅"

    - name: 发布到PyPI
      id: pypi_publish
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
        skip-existing: false
        verbose: true

    - name: 准备发布说明
      id: prepare_notes
      run: |
        if [ -n "${{ inputs.release-notes }}" ]; then
          echo "${{ inputs.release-notes }}" > RELEASE_NOTES.md
        else
          echo "Release v${{ inputs.version }}" > RELEASE_NOTES.md
        fi

    - name: 创建GitHub Release
      id: github_release
      uses: softprops/action-gh-release@v2.2.2
      with:
        tag_name: v${{ inputs.version }}
        name: Release v${{ inputs.version }}
        body_path: RELEASE_NOTES.md
        files: dist/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: 获取发布URL
      id: get_urls
      run: |
        PACKAGE_NAME=$(python -c "import json; print(json.load(open('pyproject.toml'))['project']['name'])")
        PYPI_URL="https://pypi.org/project/${PACKAGE_NAME}/${{ inputs.version }}/"
        GITHUB_RELEASE_URL="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/releases/tag/v${{ inputs.version }}"

        echo "pypi_url=${PYPI_URL}" >> $GITHUB_OUTPUT
        echo "github_release_url=${GITHUB_RELEASE_URL}" >> $GITHUB_OUTPUT

    - name: 发布摘要
      run: |
        echo "## 🚀 发布成功 v${{ inputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "📦 **PyPI**: [${PACKAGE_NAME} v${{ inputs.version }}](https://pypi.org/project/${PACKAGE_NAME}/${{ inputs.version }}/)" >> $GITHUB_STEP_SUMMARY
        echo "📝 **GitHub Release**: [v${{ inputs.version }}](${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/releases/tag/v${{ inputs.version }})" >> $GITHUB_STEP_SUMMARY
        echo "📄 **文件**:" >> $GITHUB_STEP_SUMMARY
        echo "  - Wheel: $(basename ${{ steps.build.outputs.wheel_file }})" >> $GITHUB_STEP_SUMMARY
        echo "  - Source: $(basename ${{ steps.build.outputs.sdist_file }})" >> $GITHUB_STEP_SUMMARY
