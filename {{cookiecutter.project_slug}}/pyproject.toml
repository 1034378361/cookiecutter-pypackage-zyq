[project]
name = "{{cookiecutter.project_slug}}"
version = "{{cookiecutter.version}}"
description = "{{cookiecutter.project_short_description}}"
readme = "README.md"
authors = [
  {name = "{{cookiecutter.full_name}}", email = "{{cookiecutter.email}}"}
]
maintainers = [
  {name = "{{cookiecutter.full_name}}", email = "{{cookiecutter.email}}"}
]
license = {text = "{{cookiecutter.open_source_license}}"}
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: {{cookiecutter.open_source_license}}",
    "Natural Language :: English",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
requires-python = ">=3.10"
packages = [
    {include = "{{cookiecutter.project_slug}}", from = "src"}
]
include = ["CHANGELOG.md", "LICENSE", "README.md"]

[project.urls]
"Homepage" = "https://github.com/{{cookiecutter.github_username}}/{{cookiecutter.project_slug}}"
"Bug Tracker" = "https://github.com/{{cookiecutter.github_username}}/{{cookiecutter.project_slug}}/issues"
"Documentation" = "https://{{cookiecutter.project_slug}}.readthedocs.io/"
"Repository" = "https://github.com/{{cookiecutter.github_username}}/{{cookiecutter.project_slug}}"
"Changelog" = "https://github.com/{{cookiecutter.github_username}}/{{cookiecutter.project_slug}}/blob/main/CHANGELOG.md"

# 核心依赖
[project.dependencies]
typer = ">=0.9.0"
rich = ">=10.0.0"  # Typer的彩色输出支持

# 添加所有可能的项目类型依赖
# Web Service依赖
fastapi = ">=0.100.0"
uvicorn = ">=0.23.0"
pydantic = ">=2.0.0"
# Data Science依赖
numpy = ">=1.24.0"
pandas = ">=2.0.0"
matplotlib = ">=3.7.0"
scikit-learn = ">=1.3.0"

# 开发依赖，使用 pdm install -d 或 pip install -e ".[dev]" 安装
[project.optional-dependencies]
dev = [
    # 测试工具
    "pytest>=7.0.0",
    "pytest-cov>=4.1.0",
    "coverage>=7.2.0",
    "pytest-mock>=3.12.0",       # 测试模拟工具
    "tox>=4.11.0",               # 多环境测试工具

    # 代码质量工具
    "ruff>=0.3.0",               # 代码格式化和质量检查
    "mypy>=1.6.0",               # 类型检查
    "pre-commit>=3.5.0",         # Git提交钩子
    "bandit>=1.7.5",             # 安全检查
    "bump2version>=1.0.1",       # 版本号管理工具

    # 文档工具
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocstrings>=0.24.0",
    "mkdocstrings-python>=1.8.0",
    "mkdocs-git-revision-date-localized-plugin>=1.2.0",

    # 开发体验工具
    "ipython>=8.18.0",           # 增强的交互式Shell
    "ipdb>=0.13.13",             # 增强的调试器
    "python-dotenv>=1.0.0",      # 环境变量管理

    # 工具库
    "gitpython>=3.1.40",

    # 类型存根
    "types-requests>=2.31.0",
    "types-pyyaml>=6.0.0",

    # 并行测试支持
    "pytest-xdist>=3.5.0",
]

# 项目类型特定的开发依赖
web-dev = [
    "pytest-asyncio>=0.23.0",    # 异步测试支持
    "httpx>=0.25.0",             # 现代HTTP客户端（测试API）
    "asgi-lifespan>=2.1.0",      # ASGI应用生命周期管理
]

data-dev = [
    "jupyter>=1.0.0",            # Jupyter接口
    "nbqa>=1.7.0",               # 在notebook中运行代码质量工具
    "pytest-mpl>=0.16.1",        # matplotlib图形测试
]

cli-dev = [
    "pytest-console-scripts>=1.4.0",  # 测试命令行脚本
    "typer-cli>=0.0.13",              # Typer CLI支持工具
]

# 全部开发依赖（包括项目类型特定依赖）
full-dev = [
    "dev",
    "web-dev",
    "data-dev",
    "cli-dev",
]

[project.scripts]
{{cookiecutter.project_slug}} = "{{cookiecutter.project_slug}}.cli:app"

# ============
# 工具配置
# ============

# Mypy - 类型检查配置
# ------------------
[tool.mypy]
files = ["src", "tests"]
python_version = "310"
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
strict_optional = true
show_error_codes = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true

# 测试文件允许无类型定义
[[tool.mypy.overrides]]
module = "tests.*"
allow_untyped_defs = true
disable_error_code = "attr-defined"

# Ruff - 代码质量与格式化
# ---------------------
[tool.ruff]
# 默认目标文件
target-version = "py310"
line-length = 88
include = ["src/**/*.py", "tests/**/*.py", "scripts/**/*.py"]
exclude = [
    ".git",
    ".venv",
    "__pycache__",
    "build",
    "dist",
]

# Linting规则
[tool.ruff.lint]
select = [
    "E",   # pycodestyle 错误
    "F",   # pyflakes
    "B",   # flake8-bugbear
    "I",   # isort
    "C4",  # flake8-comprehensions
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "RUF", # Ruff特有规则
    "D",   # pydocstyle
    "UP",  # pyupgrade
    "S",   # flake8-bandit (安全)
    "BLE", # flake8-blind-except
    "N",   # pep8-naming
    "COM", # flake8-commas
]
ignore = [
    "E203",  # 与Black冲突的空白符规则
    "D107",  # Missing docstring in __init__
    "D203",  # 和D211冲突
    "D213",  # 和D212冲突
    "D401",  # First line of docstring should be imperative
]

# 不检查的错误类型
unfixable = [
    "F401",  # 不自动删除未使用的导入
    "F841",  # 不自动删除未使用的变量
]

# Ruff格式化器配置
[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

# 文档字符串配置
[tool.ruff.lint.pydocstyle]
convention = "google"  # 使用Google风格文档

# 命名规范配置
[tool.ruff.lint.flake8-naming]
ignore-names = ["setUp", "tearDown", "setUpClass", "tearDownClass"]

# 导入排序配置
[tool.ruff.lint.isort]
known-first-party = ["{{cookiecutter.project_slug}}"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]

# Pytest配置
# ---------
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_functions = "test_*"
python_classes = "Test*"
addopts = "--cov=src --cov-report=term --cov-report=html --cov-report=xml --cov-fail-under=85"

# 测试覆盖率配置
# ------------
[tool.coverage.run]
source = ["src"]
omit = ["tests/*", "scripts/*"]

[tool.coverage.report]
fail_under = 85
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
]

# Tox配置
# ------
[tool.tox]
legacy_tox_ini = """
[tox]
isolated_build = True
envlist = py38, py39, py310, py311, py312

[testenv]
deps =
    pytest>=7.0.0
    pytest-cov>=4.1.0
commands =
    pytest {posargs:tests} --cov=src --cov-report=term --cov-report=xml --cov-fail-under=85
"""

# PDM构建系统配置
# -------------
[tool.pdm]
distribution = true

[build-system]
requires = ["pdm-backend>=2.0.0"]
build-backend = "pdm.backend"

