# GitHub CI build pipeline
name: Cookiecutter PyPackage CI build

on:
  push:
    branches:
      - master
      - main
  pull_request:
    branches:
      - master
      - main
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.2.2
      - name: Set up python
        uses: actions/setup-python@v5.6.0
        with:
          python-version: "3.x"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install coverage pytest pytest-cov cookiecutter
          if  [ -f requirements_dev.txt ]; then pip install -r requirements_dev.txt; else pip install .; fi
      - name: Run Tests
        run: |
          # 显示项目结构以便调试
          find . -type f -name "*.py" | sort

          # 运行测试并收集输出
          echo "::group::测试执行"
          pytest_output=$(pytest tests/ -v 2>&1) || true
          echo "$pytest_output"
          echo "::endgroup::"

          # 提取并显示测试摘要
          echo "::group::测试摘要"
          if echo "$pytest_output" | grep -q "FAILED"; then
            echo "=============================================================================================================="
            echo "short test summary info"
            echo "=============================================================================================================="
            echo "$pytest_output" | grep "FAILED" | sort
            echo "=============================================================================================================="
            echo "$pytest_output" | grep -A 1 "failed" | tail -n 1
            exit 1
          else
            echo "所有测试通过！"
          fi
          echo "::endgroup::"
      - name: Test template generation
        run: |
          # 使用模板创建示例项目
          cookiecutter --no-input . \
            project_name="Sample Project" \
            project_slug="sample_project" \
            full_name="CI Test User" \
            email="test@example.com" \
            github_username="github-actions" \
            command_line_interface="Typer" \
            use_pytest="y" \
            open_source_license="MIT license"

          # 验证生成的项目
          ls -la sample_project/
          echo "检查生成的项目是否可构建..."
          cd sample_project

          # 安装构建依赖并尝试构建
          python -m pip install --user --upgrade build
          python -m build
      - name: Archive generated project
        uses: actions/upload-artifact@v4.6.2
        with:
          name: sample-project
          path: sample_project/dist
